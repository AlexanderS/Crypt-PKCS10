#! /usr/bin/perl
# -*- mode: cperl; -*-

# Verify signature of a CSR
# Usage: verify_csr file
#        If file is not specified, reads from stdin

# Copyright (c) 2016 Timothe Litt
#
# This is free software; you can redistribute it and/or modify it under
# the same terms as the Perl 5 programming language system itself.
#
# Terms of the Perl programming language system itself
#
# a) the GNU General Public License as published by the Free
#   Software Foundation; either version 1, or (at your option) any
#   later version, or
# b) the "Artistic License"
#
# See LICENSE for details.
#
use strict;
use warnings;

use Crypt::PKCS10;
use File::Slurp;

my $in = read_file( @ARGV? $ARGV[0]: \*STDIN, binmode => ':raw' );

Crypt::PKCS10->setAPIversion(1);
my $csr = Crypt::PKCS10->new( $in ) or die Crypt::PKCS10->error;

my $key = $csr->subjectPublicKey(1); # Key as PEM
my $sig = $csr->signature(1);        # Signature as DER
my $alg = $csr->signatureAlgorithm;  # Algorithm name

my $ok;

# Determine the signature hash type from the algorithm name

my( $hash, $hashmod, $hashfcn ); # hashnnn, Digest::mod, Digest::mod::fcn
if( $alg =~ /sha-?(\d+)/i ) {
    $hash = "sha$1";
    $hashmod = 'Digest::SHA';
    $hashfcn = "Digest::SHA::$hash";
} elsif( $alg =~ /md-?(\d)/i ) {
    $hash = "md$1";
    $hashmod = "Digest::MD$1";
    $hashfcn = "Digest::MD$1::$hash";
} else {
    die( "Unknown hash in signature algorithm $alg\n" );
}

my $keyp = $csr->subjectPublicKeyParams;

die( "Unknown key type\n" ) unless( defined $keyp->{keytype} );

# Verify signature using the correct module and hash type.

if( $keyp->{keytype} eq 'RSA' ) {
    require Crypt::OpenSSL::RSA;

    $key = Crypt::OpenSSL::RSA->new_public_key( $key );
    $hash = "use_${hash}_hash";
    $key->$hash;
    $key->use_pkcs1_padding;
    $ok= $key->verify( $csr->certificationRequest, $sig );
} elsif( $keyp->{keytype} eq 'DSA' ) {
    require Crypt::OpenSSL::DSA;
    eval "require $hashmod" or die $@;

    my $dsa = Crypt::OpenSSL::DSA->read_pub_key_str( $key );
    $ok = $dsa->verify( eval "$hashfcn( \$csr->certificationRequest )", $sig );
} elsif( $keyp->{keytype} eq 'ECC' ) {
    require Crypt::PK::ECC;

    $key = Crypt::PK::ECC->new( \$key );
    $ok = $key->verify_message( $sig, $csr->certificationRequest, uc($hash) );
} else {
    die( "Unknown key type $keyp->{keytype}\n" );
}

if( $ok ) {
    print( "Signature is OK\n" );
    exit 0;
}
print( "Signature does not verify\n" );
exit 1;
